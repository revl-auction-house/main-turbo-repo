type NFT {
  collection: Collection!
  latestAuctionId: ID
  # latestAuction: Auction  # this is not required for now  TODO
  idx: Int!
  owner: String!
  dataHash: String!
  locked: Boolean!
  data: String
  name: String!
  imgUrl: String
}

type Collection {
  address: String!
  name: String!
  description: String
  floorPrice: String
  volume: String
  liveAuctionCount: Int!
  nfts: [NFT!]!
}

union AuctionType =
    EnglishAuction
  | DutchAuction
  | BlindFirstPriceAuction
  | BlindSecondPriceAuction

type Auction {
  id: ID!
  nft: NFT!
  creator: String!
  winningBid: Bid
  startTime: String!
  ended: Boolean!
  auctionType: String!
  auctionData: AuctionType
}
type EnglishAuction {
  id: ID!
  endTime: String!
  bidCount: Int!
  bids: [Bid!]!
}
type DutchAuction {
  id: ID!
  startPrice: String!
  decayRate: String!
  minPrice: String!
}
type BlindFirstPriceAuction {
  id: ID!
  revealTime: String!
  endTime: String!
  sealedBidCount: Int!
  revealedBidCount: Int!
  bids: [Bid!]!
}
type BlindSecondPriceAuction {
  id: ID!
  revealTime: String!
  endTime: String!
  sealedBidCount: Int!
  revealedBidCount: Int!
  bids: [Bid!]!
}
type Bid {
  auction: Auction!
  bidder: String!
  amount: String!
  timestamp: String!
}

type Query {
  nfts(owner: String, collection: String, skip: Int, count: Int): [NFT!]!
  nft(collection: String!, idx: Int!): NFT
  collections(skip: Int, count: Int): [Collection!]!
  collection(address: String!): Collection
  auctions(
    creator: String
    onlyLive: Boolean
    skip: Int
    count: Int
  ): [Auction!]!
  auction(id: String!): Auction
  topBids(skip: Int, count: Int): [Bid!]! # TODO use subscriptions
  userBids(address: String!, skip: Int, count: Int): [Bid!]!
  getValue(key: String!): String
}

type Mutation {
  setKeyValue(key: String!, value: String!): String
}
